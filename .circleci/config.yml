version: 2.1


references:
  workdir: &workdir
    working_directory: ~/source

  persist-workspace: &persist-workspace
    persist_to_workspace:
      root: ~/source
      paths:
        - .

  attach-workspace: &attach-workspace
    attach_workspace:
      at: .


commands:
  generate_cachekey_seed:
    description: Generate Cache Key Seeds
    steps:
      - run:
          name: Generate Cache Key Seeds
          command: |
            find . -name 'pom.xml' | sort | xargs cat > ~/source/maven_cache_seed
            if [[ ! -z "$CIRCLE_PULL_REQUEST" ]]; then
              echo "true" > ~/source/is_pr
            else
              echo "false" > ~/source/is_pr
            fi

jobs:
  checkout:
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    steps:
      - checkout
      - *persist-workspace

  release:
    <<: *workdir
    docker: # run the steps with Docker
      - image: cimg/openjdk:8.0.275-node
    resource_class: xlarge
    steps:
      - checkout
      - generate_cachekey_seed
      - restore_cache:
          keys:
            - v1-maven-dependencies-{{ checksum "maven_cache_seed" }}
            # fallback to using the latest cache if no exact match is found
            - v1-maven-dependencies-
      - add_ssh_keys:
          fingerprints:
            - "de:83:a2:6f:fe:89:6c:6c:34:58:55:f1:82:76:51:11"
      - run:
          name: Getting latest changes from the remote branch
          command: |
            git fetch --all
            git pull origin $CIRCLE_BRANCH --quiet
      - run:
          name: Delete github tag <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config user.email "jahia-ci@jahia.com"
            git config user.name "Jahia CI"
            git tag --delete <<pipeline.parameters.RELEASE_VERSION>>
            git push --delete origin <<pipeline.parameters.RELEASE_VERSION>>
      - run:
          name: Release prepare version for <<pipeline.parameters.RELEASE_VERSION>>
          command: |
            FINAL_RELEASE_VERSION=$(echo <<pipeline.parameters.RELEASE_VERSION>> | cut -d'-' -f 1)
            MAJOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f1`
            MINOR_VERSION=`echo $FINAL_RELEASE_VERSION | cut -d. -f2`
            REVISION=`echo $FINAL_RELEASE_VERSION | cut -d. -f3`
            if [[ "<<pipeline.parameters.PRIMARY_RELEASE_BRANCH>>" == "master"  || "<<pipeline.parameters.PRIMARY_RELEASE_BRANCH>>" == "main"  ||  "<<pipeline.parameters.PRIMARY_RELEASE_BRANCH>>" =~ ^[0-9]_x$ ]]; then
             NEXT_MINOR_VERSION=`expr $MINOR_VERSION + 1`
             NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$NEXT_MINOR_VERSION.0"-SNAPSHOT
            else
              NEXT_REVISION=`expr $REVISION + 1`
              NEXT_DEVELOPMENT_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$NEXT_REVISION"-SNAPSHOT
            fi
            mvn -s .circleci/.circleci.settings.xml -B -Dtag=$FINAL_RELEASE_VERSION release:prepare -DreleaseVersion=$FINAL_RELEASE_VERSION -DdevelopmentVersion="$NEXT_DEVELOPMENT_VERSION"
      - save_cache:
          # need to match rollback cache key on restore
          key: v1-rollback-<<pipeline.parameters.RELEASE_ID>>
          paths:
            - pom.xml.releaseBackup
            - release.properties
      - run:
          name: Update github release for id << pipeline.parameters.RELEASE_ID >>
          command: |
            curl -X PATCH \
            -H "Accept:application/vnd.github.v3+json" \
            -d "{\"tag_name\":\"<<pipeline.parameters.RELEASE_VERSION>>\", \"prerelease\": false, \"draft\": false}" -u \
            jahia-ci:$GITHUB_API_TOKEN https://api.github.com/repos/<<pipeline.parameters.GITHUB_SLUG>>/releases/<< pipeline.parameters.RELEASE_ID >>
            curl \
            -H "Content-Type: $(file -b --mime-type CHANGELOG.md)" \
            -u jahia-ci:$GITHUB_API_TOKEN  \
            --data-binary @CHANGELOG.md \
            "https://uploads.github.com/repos/<<pipeline.parameters.GITHUB_SLUG>>/releases/<< pipeline.parameters.RELEASE_ID >>/assets?name=$(basename CHANGELOG.md)"
      - run:
          name: Perform release
          command: |
            mvn -s .circleci/.circleci.settings.xml release:perform -Prelease-to-staging-repository -DscmCommentPrefix="[skip ci] [maven-release-plugin]"
      - run:
          name: Copy artifacts
          command: |
            mkdir /tmp/artifacts/
            cp /home/circleci/source/target/*.jar /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/


  build:
    parameters:
      is_pull_request:
        type: boolean
        default: false
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: large
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - when:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: mvn clean install
                command: mvn -s .circleci/.circleci.settings.xml clean install
      - unless:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: mvn clean deploy
                command: mvn -s .circleci/.circleci.settings.xml clean deploy
      - save_cache:
          paths:
            - ~/.m2
          key: v2-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Copy artifacts
          command: |
            mkdir /tmp/artifacts/
            cp /home/circleci/source/graphql-dxm-provider/target/*.jar /tmp/artifacts/
            cp /home/circleci/source/graphql-extension-example/target/*.jar /tmp/artifacts/
            cp /home/circleci/source/graphql-test/target/*.jar /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
      - *persist-workspace

  sonar:
    parameters:
      is_pull_request:
        type: boolean
        default: false
    <<: *workdir
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch
    resource_class: large
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - when:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: Analyze pull request with sonar
                command: |
                  mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
                  -Dsonar.pullrequest.key=<< pipeline.parameters.pull_request_number >> \
                  -Dsonar.pullrequest.base=<< pipeline.parameters.target_branch >> \
                  -Dsonar.pullrequest.github.repository=<< pipeline.parameters.github_repository >>
      - unless:
          condition: <<parameters.is_pull_request>>
          steps:
            - run:
                name: Sonar analysis
                command: |
                  if [[ "${CIRCLE_BRANCH}" == "master" ]];
                  then
                    mvn -s .circleci/.circleci.settings.xml sonar:sonar
                  else
                    mvn -s .circleci/.circleci.settings.xml sonar:sonar -Dsonar.branch.name=$CIRCLE_BRANCH
                  fi
      - save_cache:
          paths:
            - ~/.m2
          key: v2-dependencies-{{ checksum "pom.xml" }}

# Pipeline parameter must be declared
parameters:
  run_pull_request:
    type: boolean
    default: false
  target_branch:
    type: string
    default: ""
  pull_request_number:
    type: string
    default: ""
  github_repository:
    type: string
    default: ""
  GITHUB_SLUG:
    type: string
    default: "jahia/graphql-core"
  PRIMARY_RELEASE_BRANCH:
    type: string
    default: "1_x"
  RELEASE_ID:
    type: string
    default: ""
  RELEASE_VERSION:
    type: string
    default: ""
  IS_RELEASE:
    type: boolean
    default: false

workflows:
  version: 2
  # This one is run only when triggered with the API, using a GitHub action
  on-release:
    when: << pipeline.parameters.IS_RELEASE >>
    jobs:
      - release:
          context: QA_ENVIRONMENT
  pull_request:
    when: << pipeline.parameters.run_pull_request >>
    jobs:
      - checkout:
          name: PR Checkout
      - build:
          name: PR Build
          is_pull_request: true
          context: QA_ENVIRONMENT
          requires:
            - PR Checkout
      - sonar:
          name: PR Sonar analysis
          is_pull_request: true
          context: QA_ENVIRONMENT
          requires:
            - PR Build
  on-code-change:
    jobs:
      - checkout:
          filters:
            branches:
              only:
                - master
                - /feature-.*/
                - /[0-9]_[0-9]_x/
                - /[0-9]_x/
      - build:
          is_pull_request: false
          context: QA_ENVIRONMENT
          requires:
            - checkout
      - sonar:
          name: Sonar analysis
          is_pull_request: false
          context: QA_ENVIRONMENT
          requires:
            - build
